# -*- coding: utf-8 -*-
"""Parkinsons_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PvlqfNarSXMPEZsYf2Ndx2sf2cxbVhNH
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

parkinsons_data = pd.read_csv('/content/parkinsons.csv')
parkinsons_data.head()

parkinsons_data.shape

parkinsons_data.info()

parkinsons_data.isnull().sum()

parkinsons_data.describe()

parkinsons_data['status'].value_counts()

"""1 = Parkinson's Positive
0 = Healthy
"""

parkinsons_data.groupby('status').mean()

"""Data -Preprocessing

Separating the features & Target
"""

X= parkinsons_data.drop(columns=['name','status'],axis=1)
 Y = parkinsons_data['status']

print(Y)

""" Splitting the data into training and test data"""

X_train , X_test, Y_train , Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Data Standardization

"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

print(X_train)

"""Model Training

Support Vector Machine model
"""

model = svm.SVC(kernel='linear')

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of training data:', training_data_accuracy)

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data:', test_data_accuracy)

"""Building a Predictive System"""

input_data = (162.56800,198.34600,77.63000,0.00502,0.00003,0.00280,0.00253,0.00841,0.01791,0.16800,0.00793,0.01057,0.01799,0.02380,0.01170,25.67800,1,0.427785,0.723797,-6.635729,0.209866,1.957961)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
prediction =model.predict(std_data)
print(prediction)
if (prediction[0] == 0):
  print("The person does not have Parkinsons Disease")
else:
    print("The Person has Parkinsons")

"""Saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model,open(filename,'wb'))

loaded_model = pickle.load(open('trained_model.sav','rb'))

input_data = (162.56800,198.34600,77.63000,0.00502,0.00003,0.00280,0.00253,0.00841,0.01791,0.16800,0.00793,0.01057,0.01799,0.02380,0.01170,25.67800,1,0.427785,0.723797,-6.635729,0.209866,1.957961)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
prediction =model.predict(std_data)
print(prediction)
if (prediction[0] == 0):
  print("The person does not have Parkinsons Disease")
else:
    print("The Person has Parkinsons")